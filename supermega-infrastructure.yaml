AWSTemplateFormatVersion: '2010-09-09'
Description: SuperMega AI Products - Complete Cloud Infrastructure
Outputs:
  CacheEndpoint:
    Description: ElastiCache Redis endpoint
    Export:
      Name: SuperMega-Cache-Endpoint
    Value:
      Fn::GetAtt:
      - CentralNervousSystemCache
      - RedisEndpoint.Address
  DatabaseEndpoint:
    Description: RDS database endpoint
    Export:
      Name: SuperMega-DB-Endpoint
    Value:
      Fn::GetAtt:
      - RAGDatabase
      - Endpoint.Address
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Export:
      Name: SuperMega-ALB-DNS
    Value:
      Fn::GetAtt:
      - ApplicationLoadBalancer
      - DNSName
Parameters:
  InstanceType:
    Default: t3.large
    Description: EC2 instance type for AI workloads
    Type: String
  KeyName:
    Default: company-hq-final
    Description: EC2 Key Pair for SSH access
    Type: AWS::EC2::KeyPair::KeyName
  MaxInstances:
    Default: 10
    Description: Maximum number of instances in Auto Scaling Group
    Type: Number
  MinInstances:
    Default: 2
    Description: Minimum number of instances in Auto Scaling Group
    Type: Number
Resources:
  AIModelsBucket:
    Properties:
      BucketName:
        Fn::Sub: supermega-ai-models-${AWS::AccountId}
      Tags:
      - Key: Name
        Value: SuperMega-AI-Models
      VersioningConfiguration:
        Status: Enabled
    Type: AWS::S3::Bucket
  ALBSecurityGroup:
    Properties:
      GroupDescription: Security group for Application Load Balancer
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      Tags:
      - Key: Name
        Value: SuperMega-ALB-SG
      VpcId:
        Ref: SuperMegaVPC
    Type: AWS::EC2::SecurityGroup
  ApplicationLoadBalancer:
    Properties:
      Name: SuperMega-ALB
      Scheme: internet-facing
      SecurityGroups:
      - Ref: ALBSecurityGroup
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      Tags:
      - Key: Name
        Value: SuperMega-ALB
      Type: application
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  AttachGateway:
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: SuperMegaVPC
    Type: AWS::EC2::VPCGatewayAttachment
  AutoScalingGroup:
    Properties:
      AutoScalingGroupName: SuperMega-ASG
      DesiredCapacity:
        Ref: MinInstances
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      LaunchTemplate:
        LaunchTemplateId:
          Ref: SuperMegaLaunchTemplate
        Version:
          Fn::GetAtt:
          - SuperMegaLaunchTemplate
          - LatestVersionNumber
      MaxSize:
        Ref: MaxInstances
      MinSize:
        Ref: MinInstances
      Tags:
      - Key: Name
        PropagateAtLaunch: true
        Value: SuperMega-ASG-Instance
      - Key: Environment
        PropagateAtLaunch: true
        Value: Production
      VPCZoneIdentifier:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
    Type: AWS::AutoScaling::AutoScalingGroup
  CacheSecurityGroup:
    Properties:
      GroupDescription: Security group for ElastiCache
      SecurityGroupIngress:
      - FromPort: 6379
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: EC2SecurityGroup
        ToPort: 6379
      Tags:
      - Key: Name
        Value: SuperMega-Cache-SG
      VpcId:
        Ref: SuperMegaVPC
    Type: AWS::EC2::SecurityGroup
  CacheSubnetGroup:
    Properties:
      Description: Subnet group for ElastiCache
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
    Type: AWS::ElastiCache::SubnetGroup
  CentralNervousSystemCache:
    Properties:
      CacheNodeType: cache.t3.micro
      CacheSubnetGroupName:
        Ref: CacheSubnetGroup
      Engine: redis
      NumCacheNodes: 1
      Tags:
      - Key: Name
        Value: SuperMega-CNS-Cache
      VpcSecurityGroupIds:
      - Ref: CacheSecurityGroup
    Type: AWS::ElastiCache::CacheCluster
  DBSubnetGroup:
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      Tags:
      - Key: Name
        Value: SuperMega-DB-SubnetGroup
    Type: AWS::RDS::DBSubnetGroup
  EC2InstanceProfile:
    Properties:
      Roles:
      - Ref: EC2Role
    Type: AWS::IAM::InstanceProfile
  EC2Role:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:GetObject
            - s3:PutObject
            - rds:DescribeDBInstances
            - elasticache:DescribeCacheClusters
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: SuperMegaEC2Policy
    Type: AWS::IAM::Role
  EC2SecurityGroup:
    Properties:
      GroupDescription: Security group for EC2 instances
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - FromPort: 8000
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: ALBSecurityGroup
        ToPort: 8600
      - FromPort: 80
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: ALBSecurityGroup
        ToPort: 80
      Tags:
      - Key: Name
        Value: SuperMega-EC2-SG
      VpcId:
        Ref: SuperMegaVPC
    Type: AWS::EC2::SecurityGroup
  InternetGateway:
    Properties:
      Tags:
      - Key: Name
        Value: SuperMega-IGW
    Type: AWS::EC2::InternetGateway
  PrivateSubnet1:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock: 10.0.3.0/24
      Tags:
      - Key: Name
        Value: SuperMega-Private-1
      VpcId:
        Ref: SuperMegaVPC
    Type: AWS::EC2::Subnet
  PrivateSubnet2:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock: 10.0.4.0/24
      Tags:
      - Key: Name
        Value: SuperMega-Private-2
      VpcId:
        Ref: SuperMegaVPC
    Type: AWS::EC2::Subnet
  PublicRoute:
    DependsOn: AttachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: PublicRouteTable
    Type: AWS::EC2::Route
  PublicRouteTable:
    Properties:
      Tags:
      - Key: Name
        Value: SuperMega-Public-RT
      VpcId:
        Ref: SuperMegaVPC
    Type: AWS::EC2::RouteTable
  PublicSubnet1:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: SuperMega-Public-1
      VpcId:
        Ref: SuperMegaVPC
    Type: AWS::EC2::Subnet
  PublicSubnet2:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: SuperMega-Public-2
      VpcId:
        Ref: SuperMegaVPC
    Type: AWS::EC2::Subnet
  RAGDatabase:
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: supermega-rag-db
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      Engine: postgres
      EngineVersion: '14.9'
      MasterUserPassword: SuperMega2025!
      MasterUsername: supermega_admin
      Tags:
      - Key: Name
        Value: SuperMega-RAG-Database
      VPCSecurityGroups:
      - Ref: RDSSecurityGroup
    Type: AWS::RDS::DBInstance
  RDSSecurityGroup:
    Properties:
      GroupDescription: Security group for RDS database
      SecurityGroupIngress:
      - FromPort: 5432
        IpProtocol: tcp
        SourceSecurityGroupId:
          Ref: EC2SecurityGroup
        ToPort: 5432
      Tags:
      - Key: Name
        Value: SuperMega-RDS-SG
      VpcId:
        Ref: SuperMegaVPC
    Type: AWS::EC2::SecurityGroup
  SuperMegaLaunchTemplate:
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - EC2InstanceProfile
            - Arn
        ImageId: ami-0e86e20dae9224db8
        InstanceType:
          Ref: InstanceType
        KeyName:
          Ref: KeyName
        SecurityGroupIds:
        - Ref: EC2SecurityGroup
        TagSpecifications:
        - ResourceType: instance
          Tags:
          - Key: Name
            Value: SuperMega-AI-Instance
          - Key: Environment
            Value: Production
        UserData:
          Fn::Base64:
            Fn::Sub: "#!/bin/bash\nyum update -y\nyum install -y docker python3 python3-pip\
              \ git nginx\n\n# Install Docker Compose\ncurl -L \"https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname\
              \ -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n\
              \n# Start services\nsystemctl start docker\nsystemctl enable docker\n\
              systemctl start nginx\nsystemctl enable nginx\n\n# Add ec2-user to docker\
              \ group\nusermod -a -G docker ec2-user\n\n# Install Python dependencies\n\
              pip3 install streamlit fastapi uvicorn redis psycopg2-binary boto3\n\
              \n# Clone SuperMega repository\ncd /home/ec2-user\ngit clone https://github.com/swanhtet01/swanhtet01.github.io.git\
              \ supermega\nchown -R ec2-user:ec2-user supermega\n\n# Create systemd\
              \ services for SuperMega products\ncat > /etc/systemd/system/supermega-orchestrator.service\
              \ << EOF\n[Unit]\nDescription=SuperMega AI Orchestrator\nAfter=network.target\n\
              \n[Service]\nType=simple\nUser=ec2-user\nWorkingDirectory=/home/ec2-user/supermega\n\
              ExecStart=/usr/bin/python3 -m streamlit run supermega_orchestrator.py\
              \ --server.port 8509 --server.address 0.0.0.0\nRestart=always\nRestartSec=10\n\
              \n[Install]\nWantedBy=multi-user.target\nEOF\n\ncat > /etc/systemd/system/supermega-central-nervous-system.service\
              \ << EOF\n[Unit]\nDescription=SuperMega Central Nervous System\nAfter=network.target\n\
              \n[Service]\nType=simple\nUser=ec2-user\nWorkingDirectory=/home/ec2-user/supermega\n\
              ExecStart=/usr/bin/python3 central_nervous_system.py\nRestart=always\n\
              RestartSec=10\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable\
              \ and start services\nsystemctl daemon-reload\nsystemctl enable supermega-orchestrator\n\
              systemctl enable supermega-central-nervous-system\nsystemctl start supermega-orchestrator\n\
              systemctl start supermega-central-nervous-system\n\n# Configure nginx\
              \ reverse proxy\ncat > /etc/nginx/conf.d/supermega.conf << EOF\nserver\
              \ {\n    listen 80;\n    server_name supermega.dev *.supermega.dev;\n\
              \n    location / {\n        proxy_pass http://localhost:8510;\n    \
              \    proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP\
              \ \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n\
              \        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n\n  \
              \  location /orchestrator {\n        proxy_pass http://localhost:8509;\n\
              \        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP\
              \ \\$remote_addr;\n    }\n\n    location /products/ {\n        proxy_pass\
              \ http://localhost:8503/;\n        proxy_set_header Host \\$host;\n\
              \        proxy_set_header X-Real-IP \\$remote_addr;\n    }\n}\nEOF\n\
              \nsystemctl restart nginx\n\n# Install AI/ML dependencies\npip3 install\
              \ torch torchvision transformers huggingface-hub\npip3 install opencv-python\
              \ moviepy librosa speechrecognition\npip3 install selenium playwright\
              \ beautifulsoup4\npip3 install langchain chromadb sentence-transformers\n\
              \n# Download base models\nmkdir -p /home/ec2-user/models\ncd /home/ec2-user/models\n\
              python3 -c \"from transformers import AutoTokenizer, AutoModel; AutoTokenizer.from_pretrained('sentence-transformers/all-MiniLM-L6-v2');\
              \ AutoModel.from_pretrained('sentence-transformers/all-MiniLM-L6-v2')\"\
              \n\nchown -R ec2-user:ec2-user /home/ec2-user/models\n\n# Signal that\
              \ the instance is ready\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName}\
              \ --resource AutoScalingGroup --region ${AWS::Region}\n"
      LaunchTemplateName: SuperMega-LaunchTemplate
    Type: AWS::EC2::LaunchTemplate
  SuperMegaVPC:
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: SuperMega-VPC
    Type: AWS::EC2::VPC
